name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        echo "Setting up environment variables..."
        cat > .env << EOF
        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE=inventory_db
        MYSQL_USER=inventory_user
        MYSQL_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        NODE_ENV=production
        SPRING_PROFILES_ACTIVE=production
        NEXT_PUBLIC_API_URL=/api
        EOF

    - name: Set up SSH access for debugging
      run: |
        echo "Setting up SSH access for post-deployment debugging..."
        mkdir -p ~/.ssh
        echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle_key
        chmod 600 ~/.ssh/oracle_key
        echo "SSH key configured for oracle_key"
        
        # Add Oracle instance to known hosts
        ssh-keyscan -H 129.146.49.129 >> ~/.ssh/known_hosts
        
        # Test SSH connection (this will help verify the key works)
        echo "Testing SSH connection..."
        ssh -i ~/.ssh/oracle_key -o ConnectTimeout=10 ubuntu@129.146.49.129 "echo 'SSH connection successful'" || echo "SSH test failed, but continuing deployment"

    - name: Stop existing containers and repair failed migration
      run: |
        echo "Stopping existing containers..."
        docker stop $(docker ps -aq) 2>/dev/null || true
        docker system prune -f
        
        echo "Starting MySQL to repair failed migration..."
        docker-compose -f docker-compose.prod.yml up -d mysql
        sleep 20
        
        echo "Repairing failed V17 migration..."
        docker-compose -f docker-compose.prod.yml exec -T mysql mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "
        USE inventory_db;
        DELETE FROM flyway_schema_history WHERE version = '17' AND success = 0;
        " 2>/dev/null || echo "Migration repair attempted"
        
        docker-compose -f docker-compose.prod.yml stop mysql

    - name: Verify source code structure
      run: |
        echo "Checking source code structure..."
        echo "Backend (Spring Boot):"
        if [ -f ./inventory/pom.xml ]; then
          echo "✅ Found Spring Boot backend"
          ls -la ./inventory/
        else
          echo "❌ No Spring Boot backend found"
        fi
        
        echo "Frontend (Next.js):"
        if [ -f ./inventory_frontend/package.json ]; then
          echo "✅ Found Next.js frontend"
          ls -la ./inventory_frontend/
        else
          echo "❌ No Next.js frontend found"
        fi

    - name: Build application with correct configuration
      run: |
        echo "Building application with production settings..."
        export DOCKER_BUILDKIT=1
        
        # Build with no cache to ensure fresh build with /api and role fix
        docker-compose -f docker-compose.prod.yml build --no-cache --pull \
          --build-arg NEXT_PUBLIC_API_URL=/api \
          --build-arg NODE_ENV=production

    - name: Start application services
      run: |
        echo "Starting application services..."
        docker-compose -f docker-compose.prod.yml up -d
        
        echo "Force restarting nginx to pick up config changes..."
        sleep 5
        docker-compose -f docker-compose.prod.yml restart nginx
        sleep 10

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 20
        
        echo "Checking service health..."
        # Check MySQL
        for i in {1..12}; do
          if docker-compose -f docker-compose.prod.yml exec -T mysql mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} 2>/dev/null; then
            echo "✅ MySQL is healthy"
            break
          fi
          echo "⏳ Waiting for MySQL... ($i/12)"
          sleep 10
        done

        # Check Backend (extended timeout for migrations)
        for i in {1..5}; do
          if curl -f http://localhost:8080/api/actuator/health 2>/dev/null; then
            echo "✅ Backend is healthy (with /api context)"
            break
          elif curl -f http://localhost:8080/actuator/health 2>/dev/null; then
            echo "✅ Backend is healthy (without /api context)"
            break
          fi
          echo "⏳ Waiting for Backend (migrations may be running)... ($i/5)"
          sleep 10
        done

        # Check Frontend
        for i in {1..5}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "✅ Frontend is healthy"
            break
          fi
          echo "⏳ Waiting for Frontend... ($i/5)"
          sleep 10
        done

        # Check Nginx
        for i in {1..8}; do
          if curl -f http://localhost:80/health 2>/dev/null; then
            echo "✅ Nginx is healthy"
            break
          fi
          echo "⏳ Waiting for Nginx... ($i/8)"
          sleep 5
        done


    - name: Verify nginx configuration
      run: |
        echo "🔍 Checking nginx configuration in container..."
        
        # Wait for nginx to be stable
        for i in {1..10}; do
          if docker ps | grep inventory_nginx_prod | grep -q "Up"; then
            echo "✅ Nginx container is running"
            break
          fi
          echo "⏳ Waiting for nginx container to be stable... ($i/10)"
          sleep 5
        done
        
        # Test nginx configuration
        echo "Testing nginx config syntax:"
        if docker exec inventory_nginx_prod nginx -t 2>/dev/null; then
          echo "✅ Nginx configuration is valid"
        else
          echo "⚠️ Nginx configuration test failed, but continuing..."
        fi
        
        # Show a sample of the config
        echo "Sample nginx configuration:"
        docker exec inventory_nginx_prod cat /etc/nginx/nginx.conf | head -20 || echo "Could not read config"

    - name: Final deployment verification
      run: |
        echo "🔍 Final deployment verification..."
        echo "Container status:"
        docker-compose -f docker-compose.prod.yml ps
        
        echo "Testing endpoints:"
        echo "HTTP main site (port 80):"
        curl -I http://localhost:80 && echo "✅ HTTP site OK" || echo "❌ HTTP site FAILED"
        
        echo "Frontend (port 3000):"
        curl -I http://localhost:3000 && echo "✅ Frontend OK" || echo "❌ Frontend FAILED"  
        
        echo "Backend (port 8080):"
        curl -I http://localhost:8080/api/actuator/health && echo "✅ Backend OK" || echo "❌ Backend FAILED"
        
        echo "🎉 Deployment Summary:"
        if curl -s http://localhost:80 >/dev/null; then
          echo "✅ SUCCESS: Your inventory application is live!"
          echo "🌐 Access your app at: http://129.146.49.129"
          echo "📱 Frontend: Your Next.js application"
          echo "🔧 Backend: Your Spring Boot API"
          echo "💾 Database: MySQL with your schema"
          echo "📷 Camera: Configured to work on HTTP"
        else
          echo "❌ Deployment verification failed - running enhanced diagnostics..."
          echo "=== Nginx logs ==="
          docker-compose -f docker-compose.prod.yml logs nginx --tail=20
          echo "=== Frontend logs ==="
          docker-compose -f docker-compose.prod.yml logs frontend --tail=10
          echo "=== Network connectivity test ==="
          echo "Testing internal connectivity:"
          docker-compose -f docker-compose.prod.yml exec nginx curl -I http://frontend:3000 || echo "Nginx -> Frontend failed"
          exit 1
        fi

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "🚨 Deployment failed, showing debug information..."
        echo "Container status:"
        docker-compose -f docker-compose.prod.yml ps
        
        echo "Recent logs:"
        echo "=== Frontend logs ==="
        docker-compose -f docker-compose.prod.yml logs frontend --tail=10
        echo "=== Backend logs ==="
        docker-compose -f docker-compose.prod.yml logs backend --tail=10
        echo "=== Nginx logs ==="
        docker-compose -f docker-compose.prod.yml logs nginx --tail=10 