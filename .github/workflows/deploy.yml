name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  build-and-deploy:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata (tags, labels) for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./inventory_frontend
        file: ./inventory_frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        build-args: |
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=/api
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./inventory
        file: ./inventory/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Deploy to Oracle Cloud
      env:
        ORACLE_HOST: 129.146.49.129
        ORACLE_USER: ubuntu
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE: inventory_db
        MYSQL_USER: inventory_user
        MYSQL_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      run: |
        # Create deployment directory
        mkdir -p ~/deploy
        
        # Copy necessary files
        cp docker-compose.prod.yml ~/deploy/
        cp nginx/nginx.conf ~/deploy/
        cp -r mysql ~/deploy/
        
        # Create environment file
        cat > ~/deploy/.env << EOF
        MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE=${MYSQL_DATABASE}
        MYSQL_USER=${MYSQL_USER}
        MYSQL_PASSWORD=${MYSQL_PASSWORD}
        JWT_SECRET=${JWT_SECRET}
        MAIL_USERNAME=${MAIL_USERNAME}
        MAIL_PASSWORD=${MAIL_PASSWORD}
        EOF
        
        # Deploy via SSH
        echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/deploy/oracle_key
        chmod 600 ~/deploy/oracle_key
        
        # Copy files to server
        scp -i ~/deploy/oracle_key -o StrictHostKeyChecking=no -r ~/deploy/* ${ORACLE_USER}@${ORACLE_HOST}:~/inventory/
        
        # Execute deployment on server
        ssh -i ~/deploy/oracle_key -o StrictHostKeyChecking=no ${ORACLE_USER}@${ORACLE_HOST} << 'ENDSSH'
          cd ~/inventory
          
          # Stop existing containers
          docker compose -f docker-compose.prod.yml down --remove-orphans || true
          
          # Clean up old images to force rebuild
          docker system prune -f
          docker image prune -a -f
          
          # Build and start with no cache
          docker compose -f docker-compose.prod.yml build --no-cache --pull
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30
          
          # Check service status
          docker compose -f docker-compose.prod.yml ps
          
          # Test endpoints
          echo "Testing endpoints..."
          curl -f http://localhost:80/health || echo "Health check failed"
          curl -f http://localhost:3000 || echo "Frontend failed"
          curl -f http://localhost:8080/actuator/health || echo "Backend failed"
        ENDSSH
        
        # Cleanup
        rm -rf ~/deploy 