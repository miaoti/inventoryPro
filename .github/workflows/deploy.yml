name: Deploy to GCP Debian with HTTPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      gcp_instance_ip:
        description: 'GCP Instance IP Address (for reference)'
        required: true
        default: '34.45.97.0'
      gcp_ssh_user:
        description: 'SSH User for GCP Instance (for reference)'
        required: true
        default: 'gcp-github-actions-no-pass'

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  GCP_INSTANCE_IP: ${{ github.event.inputs.gcp_instance_ip || '34.45.97.0' }}

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 🛠️ Verify and Install Dependencies on Self-Hosted Runner
      run: |
        echo "🚀 Verifying dependencies on self-hosted runner..."
        
        # Update package list and install dependencies
        sudo apt-get update -y
        sudo apt-get install -y --no-install-recommends apt-transport-https ca-certificates curl gnupg lsb-release git openssl
        
        # Install Docker if not present
        if ! [ -x "$(command -v docker)" ]; then
          echo "🔧 Installing Docker..."
          curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo usermod -aG docker $USER
          echo "✅ Docker installed. NOTE: A new shell session or restart is needed for group changes to apply. Using sudo."
        else
          echo "✅ Docker is already installed."
        fi

        # Install Docker Compose if not present
        if ! [ -x "$(command -v docker-compose)" ]; then
          echo "🔧 Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "✅ Docker Compose installed."
        else
          echo "✅ Docker Compose is already installed."
        fi
        
        echo "✅ Runner setup complete."

    - name: Set up environment variables
      run: |
        echo "Setting up environment variables..."
        cat > .env << EOF
        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE=inventory_db
        MYSQL_USER=inventory_user
        MYSQL_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        NODE_ENV=production
        SPRING_PROFILES_ACTIVE=production
        NEXT_PUBLIC_API_URL=/api
        EOF

    - name: Generate SSL certificates for HTTPS camera access
      run: |
        echo "📜 Generating SSL certificates for camera functionality..."
        
        # Create SSL directory if it doesn't exist
        mkdir -p nginx/ssl
        
        # Check if certificates already exist and are valid for the target IP
        CERT_VALID=false
        if [ -f "nginx/ssl/server.crt" ]; then
          if openssl x509 -in nginx/ssl/server.crt -checkend 86400 -noout 2>/dev/null; then
            if openssl x509 -in nginx/ssl/server.crt -text -noout | grep -q "CN=${{ env.GCP_INSTANCE_IP }}"; then
              echo "✅ Valid SSL certificate for ${{ env.GCP_INSTANCE_IP }} already exists."
              CERT_VALID=true
            else
              echo "🔄 IP address has changed. Regenerating certificate."
            fi
          else
            echo "🔄 SSL certificate expired, regenerating..."
          fi
        fi
        
        # Generate new certificates if they don't exist, are invalid, or IP changed
        if [ "$CERT_VALID" = false ]; then
          echo "🔧 Generating new SSL certificates for IP: ${{ env.GCP_INSTANCE_IP }}"
          rm -f nginx/ssl/server.*
          openssl genrsa -out nginx/ssl/server.key 2048
          openssl req -new -key nginx/ssl/server.key -out nginx/ssl/server.csr \
            -subj "/C=US/ST=State/L=City/O=Inventory-System/CN=${{ env.GCP_INSTANCE_IP }}"
          openssl x509 -req -days 365 \
            -in nginx/ssl/server.csr \
            -signkey nginx/ssl/server.key \
            -out nginx/ssl/server.crt
          chmod 600 nginx/ssl/server.key
          chmod 644 nginx/ssl/server.crt
          rm nginx/ssl/server.csr
          echo "✅ SSL certificates generated successfully"
        fi

    - name: Stop existing containers and repair failed migration
      run: |
        echo "Stopping existing containers..."
        sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true
        sudo docker system prune -af
        
        echo "🔄 Resetting MySQL data volume for fresh initialization..."
        sudo docker volume rm $(sudo docker volume ls -q | grep mysql) 2>/dev/null || echo "No MySQL volumes to remove"
        
        echo "Starting MySQL with fresh initialization..."
        sudo docker-compose -f docker-compose.prod.yml up -d mysql
        sleep 30
        
        echo "✅ Checking MySQL initialization logs..."
        sudo docker-compose -f docker-compose.prod.yml logs --tail=20 mysql
        
        echo "🔍 Verifying MySQL initialization was successful..."
        for i in {1..10}; do
          if sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SHOW DATABASES;" 2>/dev/null | grep -q "inventory_db"; then
            echo "✅ MySQL initialization successful - inventory_db database created"
            break
          fi
          echo "⏳ Waiting for MySQL initialization... ($i/10)"
          sleep 5
        done
        
        sudo docker-compose -f docker-compose.prod.yml stop mysql

    - name: Apply database migrations and verify complete setup
      run: |
        echo "🔄 Starting complete application for database migrations..."
        
        # Start all services for complete migration
        sudo docker-compose -f docker-compose.prod.yml up -d mysql
        sleep 20
        
        echo "🔍 Waiting for MySQL to be ready..."
        for i in {1..12}; do
          if sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} 2>/dev/null; then
            echo "✅ MySQL is ready"
            break
          fi
          echo "⏳ Waiting for MySQL... ($i/12)"
          sleep 10
        done
        
        echo "🚀 Starting backend for Flyway migrations..."
        sudo docker-compose -f docker-compose.prod.yml up -d backend
        
        echo "⏳ Waiting for Flyway migrations to complete..."
        sleep 45
        
        echo "📜 Checking backend migration logs..."
        sudo docker-compose -f docker-compose.prod.yml logs --tail=50 backend | grep -E "(Flyway|Migration|Successfully|ERROR)" || echo "Checking full backend logs..."
        
        echo "🔍 Verifying all database tables were created by migrations..."
        sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "
        USE inventory_db;
        
        SELECT 'Database Tables Created by Migrations:' as ' ';
        SHOW TABLES;
        
        SELECT 'Flyway Migration History:' as ' ';
        SELECT version, description, success, installed_on 
        FROM flyway_schema_history 
        ORDER BY installed_rank;
        " 2>/dev/null || echo "⚠️ Migration verification had issues"
        
        echo "✅ Applying V19 migration to create owner account..."
        sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "
        USE inventory_db;
        
        -- Create owner user if not exists (V19 migration)
        INSERT INTO users (username, password, email, full_name, enabled, role, enable_email_alerts, enable_daily_digest, alert_email, created_at, updated_at) 
        VALUES ('zoe', '\$2a\$12\$2x2e3UQT/Zisuh0uNs6jVOVQdnBl0DrpUxvAvpTcglwD.iCItAqmi', 'zhongqi0728@gmail.com', 'Zoe (Owner)', TRUE, 'OWNER', TRUE, TRUE, 'zhongqi0728@gmail.com', NOW(), NOW())
        ON DUPLICATE KEY UPDATE 
          password = VALUES(password),
          email = VALUES(email),
          full_name = VALUES(full_name),
          role = VALUES(role),
          enable_email_alerts = VALUES(enable_email_alerts),
          enable_daily_digest = VALUES(enable_daily_digest),
          alert_email = VALUES(alert_email),
          updated_at = NOW();
        
        -- Verify the owner account was created/updated
        SELECT 'Owner account status:' as info, username, email, role, enable_email_alerts 
        FROM users 
        WHERE username = 'zoe';
        " 2>/dev/null || echo "Migration execution completed with warnings"
        
        echo "✅ Database migrations and setup completed"

    - name: Verify source code structure
      run: |
        echo "Checking source code structure..."
        ls -la
        
    - name: Build application with correct configuration
      run: |
        echo "Building application with production settings and HTTPS support..."
        export DOCKER_BUILDKIT=1
        
        # Build with no cache to ensure fresh build with /api and HTTPS support
        sudo docker-compose -f docker-compose.prod.yml build --no-cache --pull \
          --build-arg NEXT_PUBLIC_API_URL=/api \
          --build-arg NODE_ENV=production

    - name: Start application services with HTTPS
      run: |
        echo "Starting application services with HTTPS support..."
        sudo docker-compose -f docker-compose.prod.yml up -d
        
        echo "Force restarting nginx to pick up SSL certificates and config changes..."
        sleep 5
        sudo docker-compose -f docker-compose.prod.yml restart nginx
        sleep 10

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 20
        
        echo "Checking service health..."
        # Check MySQL
        for i in {1..12}; do
          if sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} 2>/dev/null; then
            echo "✅ MySQL is healthy"
            break
          fi
          echo "⏳ Waiting for MySQL... ($i/12)"
          sleep 10
        done

        # Check Backend (extended timeout for migrations)
        for i in {1..5}; do
          if curl -f http://localhost:8080/api/actuator/health 2>/dev/null; then
            echo "✅ Backend is healthy (with /api context)"
            break
          elif curl -f http://localhost:8080/actuator/health 2>/dev/null; then
            echo "✅ Backend is healthy (without /api context)"
            break
          fi
          echo "⏳ Waiting for Backend (migrations may be running)... ($i/5)"
          sleep 10
        done

        # Check Frontend
        for i in {1..5}; do
          if curl -f http://localhost:3000 2>/dev/null; then
            echo "✅ Frontend is healthy"
            break
          fi
          echo "⏳ Waiting for Frontend... ($i/5)"
          sleep 10
        done

        # Check Nginx HTTP
        for i in {1..8}; do
          if curl -f http://localhost:80/health 2>/dev/null; then
            echo "✅ Nginx HTTP is healthy"
            break
          fi
          echo "⏳ Waiting for Nginx HTTP... ($i/8)"
          sleep 10
        done

        # Check Nginx HTTPS
        for i in {1..8}; do
          # Use --insecure because we are using a self-signed certificate
          if curl --insecure -f https://localhost:443/health 2>/dev/null; then
            echo "✅ Nginx HTTPS is healthy"
            break
          fi
          echo "⏳ Waiting for Nginx HTTPS... ($i/8)"
          sleep 10
        done

    - name: Debug Database Connection
      run: |
        echo "🔧 Debugging database connection before verification..."
        echo "Checking MySQL container status:"
        sudo docker-compose -f docker-compose.prod.yml ps mysql
        
        echo "Checking MySQL container logs (last 20 lines):"
        sudo docker-compose -f docker-compose.prod.yml logs --tail=20 mysql
        
        echo "Testing MySQL connection with timeout:"
        timeout 10s sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} || echo "❌ MySQL ping failed or timed out"
        
        echo "Checking if database exists:"
        sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SHOW DATABASES;" 2>/dev/null || echo "❌ Failed to list databases"
        
    - name: Final Database State Verification
      run: |
        echo "🔍 Verifying final database state..."
        
        # Wait for MySQL to be completely ready before verification
        echo "⏳ Ensuring MySQL is fully ready for verification..."
        for i in {1..12}; do
          if sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysqladmin ping -h localhost -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} 2>/dev/null; then
            echo "✅ MySQL is ready for verification"
            break
          fi
          echo "⏳ Waiting for MySQL to be ready... ($i/12)"
          sleep 5
        done
        
        # Additional wait to ensure database is completely initialized
        sleep 10
        
        # Verify database connection and state
        echo "🔍 Running database verification..."
        if sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SELECT 1;" 2>/dev/null; then
          echo "✅ Database connection successful"
          
          # Run the actual verification queries
          sudo docker-compose -f docker-compose.prod.yml exec -T mysql mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "
          USE inventory_db;
          
          SELECT 'All Database Tables:' as ' ';
          SHOW TABLES;
          
          SELECT 'Flyway Migration Status:' as ' ';
          SELECT COUNT(*) as total_migrations, 
                 SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful_migrations,
                 SUM(CASE WHEN success = 0 THEN 1 ELSE 0 END) as failed_migrations
          FROM flyway_schema_history;
          
          SELECT 'Recent Migration History:' as ' ';
          SELECT version, description, success, installed_on 
          FROM flyway_schema_history 
          ORDER BY installed_rank DESC 
          LIMIT 5;
          
          SELECT 'Current Users and Roles:' as ' ';
          SELECT username, email, role, enable_email_alerts FROM users;
          
          SELECT 'Verifying Owner Account:' as ' ';
          SELECT IF(COUNT(*) = 1, 'SUCCESS', 'FAILURE') as status 
          FROM users WHERE username = 'zoe' AND role = 'OWNER';
          
          SELECT 'User Role Counts:' as ' ';
          SELECT role, COUNT(*) as count FROM users GROUP BY role;
          
          SELECT 'Database Health Check:' as ' ';
          SELECT 
            (SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'inventory_db') as total_tables,
            (SELECT COUNT(*) FROM users) as total_users,
            (SELECT COUNT(*) FROM flyway_schema_history WHERE success = 1) as successful_migrations;
          " 2>/dev/null || echo "⚠️ Database verification completed with warnings"
        else
          echo "❌ Database connection failed - checking container status..."
          sudo docker-compose -f docker-compose.prod.yml ps
          sudo docker-compose -f docker-compose.prod.yml logs --tail=50 mysql
          echo "⚠️ Skipping database verification due to connection issues"
        fi

    - name: Display Application Logs for Debugging
      run: |
        echo "📜 Displaying application logs for debugging..."
        sudo docker-compose -f docker-compose.prod.yml logs --tail=150
        
    - name: Deployment Summary
      run: |
        echo "🎉 Deployment to ${{ env.GCP_INSTANCE_IP }} complete!"
        echo "Access your application at: https://${{ env.GCP_INSTANCE_IP }}"
        echo "Check the detailed logs above for verification." 