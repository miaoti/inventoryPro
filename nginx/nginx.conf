events {
    worker_connections 1024;
}

http {
    # Logging
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" $request_time';
    
    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;

    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8080;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # HTTP server - handles Let's Encrypt challenges and redirects to HTTPS
    server {
        listen 80;
        server_name _;
        client_max_body_size 20M;
        
        # Let's Encrypt challenge endpoint
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri $uri/ =404;
        }
        
        # Basic health check endpoint (available on HTTP)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all other traffic to HTTPS (when certificates are available)
        location / {
            # Check if SSL certificate exists
            if (-f /etc/nginx/ssl/live/129.146.49.129/fullchain.pem) {
                return 301 https://$host$request_uri;
            }
            
            # If no SSL certificate, serve the app over HTTP
            # Add debugging headers
            add_header X-Debug-Upstream "frontend:3000" always;
            add_header X-Debug-Location "root-http-fallback" always;
            add_header X-SSL-Status "No certificate - serving over HTTP" always;
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
            proxy_set_header X-Forwarded-Port 80;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /50x.html;
        }
        
        # Backend API routes (HTTP fallback)
        location /api/ {
            # Check if SSL certificate exists for API calls too
            if (-f /etc/nginx/ssl/live/129.146.49.129/fullchain.pem) {
                return 301 https://$host$request_uri;
            }
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin http://$host;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
                add_header Content-Type text/plain;
                add_header Content-Length 0;
                return 204;
            }
            
            # Add debugging headers
            add_header X-Debug-Upstream "backend:8080" always;
            add_header X-Debug-Location "api-http-fallback" always;
            add_header X-SSL-Status "No certificate - serving over HTTP" always;
            
            proxy_pass http://backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto http;
            proxy_set_header X-Forwarded-Port 80;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # CORS headers for API (using HTTP origin)
            add_header Access-Control-Allow-Origin http://$host;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS server (only active when certificates exist)
    server {
        listen 443 ssl http2;
        server_name _;
        client_max_body_size 20M;
        
        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/live/129.146.49.129/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/129.146.49.129/privkey.pem;
        
        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # Basic health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Frontend routes
        location / {
            # Add debugging headers
            add_header X-Debug-Upstream "frontend:3000" always;
            add_header X-Debug-Location "root-https" always;
            add_header X-SSL-Status "Certificate active - serving over HTTPS" always;
            
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Error handling
            proxy_intercept_errors on;
            error_page 502 503 504 /50x.html;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Backend API routes
        location /api/ {
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin https://$host;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
                add_header Content-Type text/plain;
                add_header Content-Length 0;
                return 204;
            }
            
            # Add debugging headers
            add_header X-Debug-Upstream "backend:8080" always;
            add_header X-Debug-Location "api-https" always;
            add_header X-SSL-Status "Certificate active - serving over HTTPS" always;
            
            proxy_pass http://backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # CORS headers for API (using HTTPS origin)
            add_header Access-Control-Allow-Origin https://$host;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        }
    }
} 